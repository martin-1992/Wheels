package com.martin;import com.martin.config.ZooKeeperProperty;import com.martin.entity.ProviderService;import com.martin.zookeeper.IRegisterCenterForProvider;import com.martin.zookeeper.RegisterCenter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.List;/** * **/@Componentpublic class ProviderBootstrap {    private static final Logger logger = LoggerFactory.getLogger(ProviderBootstrap.class);    @Value("${producer.interface}")    private String serviceInterface;    @Value("${producer.object}")    private String serviceObject;    @Value("${producer.ip}")    private String serverIp;    @Value("${producer.port}")    private int serverPort;    @Value("${producer.timeout}")    private long timeout;    @Value("${producer.group-name}")    private String groupName;    void start() {        // 启动 Netty 服务端        NettyServer.singleton().start(serverPort, ZooKeeperProperty.getSerializeType());        // 从配置文件中，获取类，并反射实现，将其添加到服务实现列表中        List<ProviderService> providerServiceList = buildProviderServiceList();        IRegisterCenterForProvider registerCenterForProvider = RegisterCenter.singleton();        // 注册 zookeeper        registerCenterForProvider.registerProvider(providerServiceList);    }    /**     * 从配置文件中，获取类，将其添加到服务实现列表中     * @return     */    private List<ProviderService> buildProviderServiceList() {        List<ProviderService> providerServiceList = new ArrayList<>();        Object serviceImpl;        try {            // 获取实现类并实例化，比如 HelloServiceImpl            serviceImpl = Class.forName(serviceObject).newInstance();        } catch (Exception e) {            logger.info("ProviderBootstrap#buildProviderServiceList 类 {} 类无法实例化, 错误: {}",  serviceObject, e);            throw new RuntimeException("类无法实例化");        }        // 获取该服务实现类的本类方法，与 getMethods() 区别在于，getMethods() 会获取本类和父类的方法，而        // getDeclaredMethods() 只会获取本类方法，没有父类的方法        Method[] methods = serviceImpl.getClass().getDeclaredMethods();        // 遍历该服务实现的所有方法，获取公共方法，添加到服务实现的列表中        for (Method method : methods) {            // 判断该方法是否为 public 修饰的            if (!Modifier.isPublic(method.getModifiers())) {                continue;            }            ProviderService providerService = new ProviderService();            try {                // 服务接口                providerService.setServiceInterface(Class.forName(serviceInterface));            } catch (ClassNotFoundException e) {                logger.error("ProviderBootstrap#buildProviderServiceList 没有找到该类, e: " + e);                break;            }            providerService.setServiceImpl(serviceImpl);            providerService.setServiceIP(serverIp);            providerService.setServicePort(serverPort);            providerService.setTimeout(timeout);            providerService.setGroupName(groupName);            providerService.setServiceMethod(method);            providerServiceList.add(providerService);        }        return providerServiceList;    }}